generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model appointment {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date       DateTime  @db.Timestamp(6)
  user_id    String    @db.Uuid
  car_id     String    @db.Uuid
  service_id String    @db.Uuid
  status     String?   @db.VarChar(20)
  notes      String?   @db.VarChar(255)
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @default(now()) @db.Timestamp(6)
  car        car       @relation(fields: [car_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  service    service   @relation(fields: [service_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  invoice    invoice[]
}

model car {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  make        String        @db.VarChar(255)
  model       String        @db.VarChar(255)
  year        Int
  vin         String        @db.VarChar(255)
  color       String?       @db.VarChar(255)
  user_id     String        @db.Uuid
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  appointment appointment[]
  user        user          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model company {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?   @db.VarChar(255)
  address     String?   @db.VarChar(255)
  city        String?   @db.VarChar(255)
  state       String?   @db.VarChar(255)
  zip_code    String?   @db.VarChar(10)
  name        String    @db.VarChar(255)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  user_id     String    @db.Uuid
  tenant_id   String    @db.VarChar(255)
  user        user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  invoice     invoice[]
  service     service[]
}

model invoice {
  id             String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  total_cost     Int?
  paid           Boolean?
  payment_date   DateTime?   @db.Timestamp(6)
  appointment_id String      @db.Uuid
  user_id        String      @db.Uuid
  company_id     String      @db.Uuid
  created_at     DateTime    @default(now()) @db.Timestamp(6)
  updated_at     DateTime    @default(now()) @db.Timestamp(6)
  appointment    appointment @relation(fields: [appointment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  company        company     @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user           user        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model service {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String        @db.VarChar(255)
  description  String?       @db.VarChar(255)
  cost         Int?
  duration     Int?
  company_id   String        @db.Uuid
  created_at   DateTime      @default(now()) @db.Timestamp(6)
  updated_at   DateTime      @default(now()) @db.Timestamp(6)
  service_type String?       @db.VarChar(255)
  product_type String?       @db.VarChar(255)
  appointment  appointment[]
  company      company       @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String        @unique @db.VarChar(255)
  firstName   String?       @db.VarChar(255)
  lastName    String?       @db.VarChar(255)
  roq_user_id String        @db.VarChar(255)
  tenant_id   String        @db.VarChar(255)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  appointment appointment[]
  car         car[]
  company     company[]
  invoice     invoice[]
}
